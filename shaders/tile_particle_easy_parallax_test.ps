#if defined( GL_ES )
precision mediump float;
#endif

uniform mat4 MatrixP;
uniform mat4 MatrixV;
uniform mat4 MatrixW;

uniform sampler2D SAMPLER[4];

varying vec3 PS_TEXCOORD_LIFE;
varying vec4 PS_COLOUR;

#ifndef LIGHTING_H
#define LIGHTING_H

#if !defined( UI_CC )
// Lighting
varying vec3 PS_POS;
#endif

// xy = min, zw = max
uniform vec4 LIGHTMAP_WORLD_EXTENTS;

#define LIGHTMAP_TEXTURE SAMPLER[3]

#ifndef LIGHTMAP_TEXTURE
	#error If you use lighting, you must #define the sampler that the lightmap belongs to
#endif

#if defined( UI_CC )
vec3 CalculateLightingContribution(vec2 pos)
{
	vec2 uv = ( pos - LIGHTMAP_WORLD_EXTENTS.xy ) * LIGHTMAP_WORLD_EXTENTS.zw;
	return texture2D( LIGHTMAP_TEXTURE, uv.xy ).rgb;
}
#else
vec3 CalculateLightingContribution()
{
	vec2 uv = ( PS_POS.xz - LIGHTMAP_WORLD_EXTENTS.xy ) * LIGHTMAP_WORLD_EXTENTS.zw;
	return texture2D( LIGHTMAP_TEXTURE, uv.xy ).rgb;
}

vec3 CalculateLightingContribution( vec3 normal )
{
	return vec3( 1, 1, 1 );
}
#endif

#endif //LIGHTING.h

mat4 inverseMat4(mat4 m) {
    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3];
    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3];
    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3];
    float a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3];

    float b00 = a00 * a11 - a01 * a10;
    float b01 = a00 * a12 - a02 * a10;
    float b02 = a00 * a13 - a03 * a10;
    float b03 = a01 * a12 - a02 * a11;
    float b04 = a01 * a13 - a03 * a11;
    float b05 = a02 * a13 - a03 * a12;
    float b06 = a20 * a31 - a21 * a30;
    float b07 = a20 * a32 - a22 * a30;
    float b08 = a20 * a33 - a23 * a30;
    float b09 = a21 * a32 - a22 * a31;
    float b10 = a21 * a33 - a23 * a31;
    float b11 = a22 * a33 - a23 * a32;

    float det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (abs(det) < 1e-6) return mat4(1.0);

    mat4 inv;
    inv[0][0] = (a11 * b11 - a12 * b10 + a13 * b09) / det;
    inv[0][1] = (-a01 * b11 + a02 * b10 - a03 * b09) / det;
    inv[0][2] = (a31 * b05 - a32 * b04 + a33 * b03) / det;
    inv[0][3] = (-a21 * b05 + a22 * b04 - a23 * b03) / det;
    inv[1][0] = (-a10 * b11 + a12 * b08 - a13 * b07) / det;
    inv[1][1] = (a00 * b11 - a02 * b08 + a03 * b07) / det;
    inv[1][2] = (-a30 * b05 + a32 * b02 - a33 * b01) / det;
    inv[1][3] = (a20 * b05 - a22 * b02 + a23 * b01) / det;
    inv[2][0] = (a10 * b10 - a11 * b08 + a13 * b06) / det;
    inv[2][1] = (-a00 * b10 + a01 * b08 - a03 * b06) / det;
    inv[2][2] = (a30 * b04 - a31 * b02 + a33 * b00) / det;
    inv[2][3] = (-a20 * b04 + a21 * b02 - a23 * b00) / det;
    inv[3][0] = (-a10 * b09 + a11 * b07 - a12 * b06) / det;
    inv[3][1] = (a00 * b09 - a01 * b07 + a02 * b06) / det;
    inv[3][2] = (-a30 * b03 + a31 * b01 - a32 * b00) / det;
    inv[3][3] = (a20 * b03 - a21 * b01 + a22 * b00) / det;

    return inv;
}

void main()
{
    mat4 invView = inverseMat4(MatrixV);
    vec3 cameraPos = invView[3].xyz;
    
    //计算从摄像机到片元的射线方向
    vec3 rayDir = normalize(PS_POS - cameraPos);
    
    //计算射线与平面 y=-1 的交点
    
    //计算交点参数
    float t = (-10.0 - cameraPos.y) / rayDir.y;
    
    //计算交点坐标
    vec3 intersection = cameraPos + t * rayDir;

    //根据交点坐标计算纹理坐标
	float noise_x = mod(intersection.x, 29.0) * 0.0344827586 * 0.25 + 0.0078125;
	float noise_z = mod(intersection.z, 29.0) * 0.0344827586 * 0.25 + 0.0078125;
	vec2 noise_texcoord = vec2(noise_x, noise_z);
	vec4 colour = texture2D( SAMPLER[0], PS_TEXCOORD_LIFE.xy );
	vec4 colour2 = texture2D( SAMPLER[0], noise_texcoord.xy );
	gl_FragColor = vec4( colour.rgb * PS_COLOUR.rgb * colour2.rgb * colour.a , colour.a * PS_COLOUR.a * colour2.a );

	vec3 light = CalculateLightingContribution();
	gl_FragColor.rgb *= CalculateLightingContribution();
}